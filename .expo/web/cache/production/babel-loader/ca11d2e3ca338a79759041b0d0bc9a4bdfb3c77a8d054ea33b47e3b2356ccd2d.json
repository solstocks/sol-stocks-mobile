{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.seedVaultService=exports.SeedVaultUtils=exports.MobileSeedVault=void 0;var _asyncToGenerator2=_interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _web=require(\"@solana/web3.js\");var _asyncStorage=_interopRequireDefault(require(\"@react-native-async-storage/async-storage\"));var Keychain=_interopRequireWildcard(require(\"react-native-keychain\"));var _reactNativeGetRandomValues=require(\"react-native-get-random-values\");function _interopRequireWildcard(e,t){if(\"function\"==typeof WeakMap)var r=new WeakMap(),n=new WeakMap();return(_interopRequireWildcard=function(e,t){if(!t&&e&&e.__esModule)return e;var o,i,f={__proto__:null,default:e};if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return f;if(o=t?n:r){if(o.has(e))return o.get(e);o.set(e,f);}for(var _t in e)\"default\"!==_t&&{}.hasOwnProperty.call(e,_t)&&((i=(o=Object.defineProperty)&&Object.getOwnPropertyDescriptor(e,_t))&&(i.get||i.set)?o(f,_t,i):f[_t]=e[_t]);return f;})(e,t);}var MobileSeedVault=exports.MobileSeedVault=function(){function MobileSeedVault(){(0,_classCallCheck2.default)(this,MobileSeedVault);this.SEED_VAULT_PREFIX='sol_stocks_seed_';this.KEYCHAIN_SERVICE='SolStocksKeychainService';}return(0,_createClass2.default)(MobileSeedVault,[{key:\"generateSeed\",value:(function(){var _generateSeed=(0,_asyncToGenerator2.default)(function*(){try{var _seed=new Uint8Array(32);(0,_reactNativeGetRandomValues.getRandomBytes)(_seed);return _seed;}catch(error){console.error('Seed generation failed:',error);throw new Error('Failed to generate secure seed');}});function generateSeed(){return _generateSeed.apply(this,arguments);}return generateSeed;}())},{key:\"storeSeed\",value:(function(){var _storeSeed=(0,_asyncToGenerator2.default)(function*(seed,alias){try{var seedBase64=Buffer.from(seed).toString('base64');var keychainKey=`${this.SEED_VAULT_PREFIX}${alias}`;var result=yield Keychain.setInternetCredentials(keychainKey,alias,seedBase64,{accessControl:Keychain.ACCESS_CONTROL.BIOMETRY_CURRENT_SET_OR_DEVICE_PASSCODE,authenticatePrompt:'Authenticate to store your Sol Stocks seed',service:this.KEYCHAIN_SERVICE,securityLevel:Keychain.SECURITY_LEVEL.SECURE_HARDWARE});if(result){yield _asyncStorage.default.setItem(`${keychainKey}_metadata`,JSON.stringify({alias,createdAt:Date.now(),lastUsed:Date.now()}));}return result;}catch(error){console.error('Seed storage failed:',error);return false;}});function storeSeed(_x,_x2){return _storeSeed.apply(this,arguments);}return storeSeed;}())},{key:\"retrieveSeed\",value:(function(){var _retrieveSeed=(0,_asyncToGenerator2.default)(function*(alias){try{var keychainKey=`${this.SEED_VAULT_PREFIX}${alias}`;var credentials=yield Keychain.getInternetCredentials(keychainKey,{authenticatePrompt:'Authenticate to access your Sol Stocks seed',service:this.KEYCHAIN_SERVICE});if(credentials&&credentials.password){yield _asyncStorage.default.setItem(`${keychainKey}_metadata`,JSON.stringify({alias,lastUsed:Date.now()}));var seedBuffer=Buffer.from(credentials.password,'base64');return new Uint8Array(seedBuffer);}return null;}catch(error){console.error('Seed retrieval failed:',error);return null;}});function retrieveSeed(_x3){return _retrieveSeed.apply(this,arguments);}return retrieveSeed;}())},{key:\"deleteSeed\",value:(function(){var _deleteSeed=(0,_asyncToGenerator2.default)(function*(alias){try{var keychainKey=`${this.SEED_VAULT_PREFIX}${alias}`;var result=yield Keychain.resetInternetCredentials(keychainKey,{service:this.KEYCHAIN_SERVICE});if(result){yield _asyncStorage.default.removeItem(`${keychainKey}_metadata`);}return result;}catch(error){console.error('Seed deletion failed:',error);return false;}});function deleteSeed(_x4){return _deleteSeed.apply(this,arguments);}return deleteSeed;}())},{key:\"createKeypairFromSeed\",value:function createKeypairFromSeed(seed){try{return _web.Keypair.fromSeed(seed.slice(0,32));}catch(error){console.error('Keypair creation failed:',error);throw new Error('Failed to create keypair from seed');}}},{key:\"isDeviceSecure\",value:(function(){var _isDeviceSecure=(0,_asyncToGenerator2.default)(function*(){try{var securityLevel=yield Keychain.getSecurityLevel({service:this.KEYCHAIN_SERVICE});return securityLevel===Keychain.SECURITY_LEVEL.SECURE_HARDWARE||securityLevel===Keychain.SECURITY_LEVEL.SECURE_SOFTWARE;}catch(error){console.error('Device security check failed:',error);return false;}});function isDeviceSecure(){return _isDeviceSecure.apply(this,arguments);}return isDeviceSecure;}())},{key:\"listSeeds\",value:(function(){var _listSeeds=(0,_asyncToGenerator2.default)(function*(){var _this=this;try{var keys=yield _asyncStorage.default.getAllKeys();var seedKeys=keys.filter(function(key){return key.includes(`${_this.SEED_VAULT_PREFIX}`)&&key.includes('_metadata');});var seedInfos=yield Promise.all(seedKeys.map(function(){var _ref=(0,_asyncToGenerator2.default)(function*(key){try{var metadata=yield _asyncStorage.default.getItem(key);return metadata?JSON.parse(metadata):null;}catch{return null;}});return function(_x5){return _ref.apply(this,arguments);};}()));return seedInfos.filter(function(info){return info!==null;});}catch(error){console.error('Seed listing failed:',error);return[];}});function listSeeds(){return _listSeeds.apply(this,arguments);}return listSeeds;}())},{key:\"createUserSeed\",value:(function(){var _createUserSeed=(0,_asyncToGenerator2.default)(function*(userAlias='default'){try{var _seed2=yield this.generateSeed();var keypair=this.createKeypairFromSeed(_seed2);var stored=yield this.storeSeed(_seed2,userAlias);if(!stored){throw new Error('Failed to store seed securely');}return{seed:_seed2,keypair,publicKey:keypair.publicKey.toBase58()};}catch(error){console.error('User seed creation failed:',error);return null;}});function createUserSeed(){return _createUserSeed.apply(this,arguments);}return createUserSeed;}())},{key:\"recoverUserKeypair\",value:(function(){var _recoverUserKeypair=(0,_asyncToGenerator2.default)(function*(userAlias='default'){try{var _seed3=yield this.retrieveSeed(userAlias);if(!_seed3){return null;}return this.createKeypairFromSeed(_seed3);}catch(error){console.error('User keypair recovery failed:',error);return null;}});function recoverUserKeypair(){return _recoverUserKeypair.apply(this,arguments);}return recoverUserKeypair;}())}]);}();var seedVaultService=exports.seedVaultService=new MobileSeedVault();var SeedVaultUtils=exports.SeedVaultUtils={setupUserWallet(){return(0,_asyncToGenerator2.default)(function*(alias='sol_stocks_user'){try{var keypair=yield seedVaultService.recoverUserKeypair(alias);var isNewWallet=false;if(!keypair){var result=yield seedVaultService.createUserSeed(alias);if(!result){return null;}keypair=result.keypair;isNewWallet=true;}return{publicKey:keypair.publicKey.toBase58(),isNewWallet};}catch(error){console.error('Wallet setup failed:',error);return null;}}).apply(this,arguments);},signTransaction(_x6){return(0,_asyncToGenerator2.default)(function*(transaction,userAlias='sol_stocks_user'){try{var keypair=yield seedVaultService.recoverUserKeypair(userAlias);if(!keypair){throw new Error('No keypair found for user');}transaction.sign(keypair);return transaction;}catch(error){console.error('Transaction signing failed:',error);return null;}}).apply(this,arguments);}};","map":{"version":3,"names":["_web","require","_asyncStorage","_interopRequireDefault","Keychain","_interopRequireWildcard","_reactNativeGetRandomValues","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","MobileSeedVault","exports","_classCallCheck2","SEED_VAULT_PREFIX","KEYCHAIN_SERVICE","_createClass2","key","value","_generateSeed","_asyncToGenerator2","seed","Uint8Array","getRandomBytes","error","console","Error","generateSeed","apply","arguments","_storeSeed","alias","seedBase64","Buffer","from","toString","keychainKey","result","setInternetCredentials","accessControl","ACCESS_CONTROL","BIOMETRY_CURRENT_SET_OR_DEVICE_PASSCODE","authenticatePrompt","service","securityLevel","SECURITY_LEVEL","SECURE_HARDWARE","AsyncStorage","setItem","JSON","stringify","createdAt","Date","now","lastUsed","storeSeed","_x","_x2","_retrieveSeed","credentials","getInternetCredentials","password","seedBuffer","retrieveSeed","_x3","_deleteSeed","resetInternetCredentials","removeItem","deleteSeed","_x4","createKeypairFromSeed","Keypair","fromSeed","slice","_isDeviceSecure","getSecurityLevel","SECURE_SOFTWARE","isDeviceSecure","_listSeeds","_this","keys","getAllKeys","seedKeys","filter","includes","seedInfos","Promise","all","map","_ref","metadata","getItem","parse","_x5","info","listSeeds","_createUserSeed","userAlias","keypair","stored","publicKey","toBase58","createUserSeed","_recoverUserKeypair","recoverUserKeypair","seedVaultService","SeedVaultUtils","setupUserWallet","isNewWallet","signTransaction","_x6","transaction","sign"],"sources":["/Users/sarahfitzgerald/SolStocksMobile/src/utils/seedVault.ts"],"sourcesContent":["import { Keypair, PublicKey } from '@solana/web3.js';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as Keychain from 'react-native-keychain';\nimport { getRandomBytes } from 'react-native-get-random-values';\n\nexport interface SeedVaultService {\n  generateSeed(): Promise<Uint8Array>;\n  storeSeed(seed: Uint8Array, alias: string): Promise<boolean>;\n  retrieveSeed(alias: string): Promise<Uint8Array | null>;\n  deleteSeed(alias: string): Promise<boolean>;\n  createKeypairFromSeed(seed: Uint8Array): Keypair;\n  isDeviceSecure(): Promise<boolean>;\n}\n\n/**\n * Seed Vault integration for secure key management\n * This implements the Solana Mobile Stack Seed Vault for secure storage\n */\nexport class MobileSeedVault implements SeedVaultService {\n  private readonly SEED_VAULT_PREFIX = 'sol_stocks_seed_';\n  private readonly KEYCHAIN_SERVICE = 'SolStocksKeychainService';\n\n  /**\n   * Generate cryptographically secure random seed\n   */\n  async generateSeed(): Promise<Uint8Array> {\n    try {\n      // Generate 32 bytes of cryptographically secure random data\n      const seed = new Uint8Array(32);\n      getRandomBytes(seed);\n      return seed;\n    } catch (error) {\n      console.error('Seed generation failed:', error);\n      throw new Error('Failed to generate secure seed');\n    }\n  }\n\n  /**\n   * Store seed securely in device keychain\n   */\n  async storeSeed(seed: Uint8Array, alias: string): Promise<boolean> {\n    try {\n      const seedBase64 = Buffer.from(seed).toString('base64');\n      const keychainKey = `${this.SEED_VAULT_PREFIX}${alias}`;\n      \n      // Store in secure keychain with biometric protection if available\n      const result = await Keychain.setInternetCredentials(\n        keychainKey,\n        alias,\n        seedBase64,\n        {\n          accessControl: Keychain.ACCESS_CONTROL.BIOMETRY_CURRENT_SET_OR_DEVICE_PASSCODE,\n          authenticatePrompt: 'Authenticate to store your Sol Stocks seed',\n          service: this.KEYCHAIN_SERVICE,\n          securityLevel: Keychain.SECURITY_LEVEL.SECURE_HARDWARE,\n        }\n      );\n\n      if (result) {\n        // Store metadata for seed management\n        await AsyncStorage.setItem(`${keychainKey}_metadata`, JSON.stringify({\n          alias,\n          createdAt: Date.now(),\n          lastUsed: Date.now(),\n        }));\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Seed storage failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Retrieve seed from secure storage\n   */\n  async retrieveSeed(alias: string): Promise<Uint8Array | null> {\n    try {\n      const keychainKey = `${this.SEED_VAULT_PREFIX}${alias}`;\n      \n      const credentials = await Keychain.getInternetCredentials(keychainKey, {\n        authenticatePrompt: 'Authenticate to access your Sol Stocks seed',\n        service: this.KEYCHAIN_SERVICE,\n      });\n\n      if (credentials && credentials.password) {\n        // Update last used timestamp\n        await AsyncStorage.setItem(`${keychainKey}_metadata`, JSON.stringify({\n          alias,\n          lastUsed: Date.now(),\n        }));\n\n        const seedBuffer = Buffer.from(credentials.password, 'base64');\n        return new Uint8Array(seedBuffer);\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Seed retrieval failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Delete seed from secure storage\n   */\n  async deleteSeed(alias: string): Promise<boolean> {\n    try {\n      const keychainKey = `${this.SEED_VAULT_PREFIX}${alias}`;\n      \n      const result = await Keychain.resetInternetCredentials(keychainKey, {\n        service: this.KEYCHAIN_SERVICE,\n      });\n\n      if (result) {\n        // Remove metadata\n        await AsyncStorage.removeItem(`${keychainKey}_metadata`);\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Seed deletion failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Create Solana keypair from seed\n   */\n  createKeypairFromSeed(seed: Uint8Array): Keypair {\n    try {\n      return Keypair.fromSeed(seed.slice(0, 32));\n    } catch (error) {\n      console.error('Keypair creation failed:', error);\n      throw new Error('Failed to create keypair from seed');\n    }\n  }\n\n  /**\n   * Check if device has secure hardware for key storage\n   */\n  async isDeviceSecure(): Promise<boolean> {\n    try {\n      const securityLevel = await Keychain.getSecurityLevel({\n        service: this.KEYCHAIN_SERVICE,\n      });\n      \n      return securityLevel === Keychain.SECURITY_LEVEL.SECURE_HARDWARE ||\n             securityLevel === Keychain.SECURITY_LEVEL.SECURE_SOFTWARE;\n    } catch (error) {\n      console.error('Device security check failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * List all stored seeds\n   */\n  async listSeeds(): Promise<Array<{ alias: string; createdAt: number; lastUsed: number }>> {\n    try {\n      const keys = await AsyncStorage.getAllKeys();\n      const seedKeys = keys.filter(key => key.includes(`${this.SEED_VAULT_PREFIX}`) && key.includes('_metadata'));\n      \n      const seedInfos = await Promise.all(\n        seedKeys.map(async (key) => {\n          try {\n            const metadata = await AsyncStorage.getItem(key);\n            return metadata ? JSON.parse(metadata) : null;\n          } catch {\n            return null;\n          }\n        })\n      );\n\n      return seedInfos.filter(info => info !== null);\n    } catch (error) {\n      console.error('Seed listing failed:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Generate and store a new seed for the user\n   */\n  async createUserSeed(userAlias: string = 'default'): Promise<{ seed: Uint8Array; keypair: Keypair; publicKey: string } | null> {\n    try {\n      const seed = await this.generateSeed();\n      const keypair = this.createKeypairFromSeed(seed);\n      \n      const stored = await this.storeSeed(seed, userAlias);\n      if (!stored) {\n        throw new Error('Failed to store seed securely');\n      }\n\n      return {\n        seed,\n        keypair,\n        publicKey: keypair.publicKey.toBase58(),\n      };\n    } catch (error) {\n      console.error('User seed creation failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Recover user keypair from stored seed\n   */\n  async recoverUserKeypair(userAlias: string = 'default'): Promise<Keypair | null> {\n    try {\n      const seed = await this.retrieveSeed(userAlias);\n      if (!seed) {\n        return null;\n      }\n\n      return this.createKeypairFromSeed(seed);\n    } catch (error) {\n      console.error('User keypair recovery failed:', error);\n      return null;\n    }\n  }\n}\n\n// Export singleton instance\nexport const seedVaultService = new MobileSeedVault();\n\n// Utility functions for common operations\nexport const SeedVaultUtils = {\n  async setupUserWallet(alias: string = 'sol_stocks_user'): Promise<{\n    publicKey: string;\n    isNewWallet: boolean;\n  } | null> {\n    try {\n      // Try to recover existing wallet first\n      let keypair = await seedVaultService.recoverUserKeypair(alias);\n      let isNewWallet = false;\n\n      if (!keypair) {\n        // Create new wallet if none exists\n        const result = await seedVaultService.createUserSeed(alias);\n        if (!result) {\n          return null;\n        }\n        keypair = result.keypair;\n        isNewWallet = true;\n      }\n\n      return {\n        publicKey: keypair.publicKey.toBase58(),\n        isNewWallet,\n      };\n    } catch (error) {\n      console.error('Wallet setup failed:', error);\n      return null;\n    }\n  },\n\n  async signTransaction(transaction: any, userAlias: string = 'sol_stocks_user'): Promise<any | null> {\n    try {\n      const keypair = await seedVaultService.recoverUserKeypair(userAlias);\n      if (!keypair) {\n        throw new Error('No keypair found for user');\n      }\n\n      // Sign the transaction\n      transaction.sign(keypair);\n      return transaction;\n    } catch (error) {\n      console.error('Transaction signing failed:', error);\n      return null;\n    }\n  },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}