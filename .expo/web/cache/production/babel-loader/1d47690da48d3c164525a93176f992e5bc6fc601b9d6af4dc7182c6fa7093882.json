{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.mobileWalletService=exports.MobileWalletService=void 0;var _asyncToGenerator2=_interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _mobileWalletAdapterProtocolWeb3js=require(\"@solana-mobile/mobile-wallet-adapter-protocol-web3js\");var _web=require(\"@solana/web3.js\");var _solanaConfig=require(\"./solanaConfig\");var MobileWalletService=exports.MobileWalletService=function(){function MobileWalletService(config){(0,_classCallCheck2.default)(this,MobileWalletService);this.connectedPublicKey=null;this.connection=_solanaConfig.connection;this.config=config;}return(0,_createClass2.default)(MobileWalletService,[{key:\"connect\",value:(function(){var _connect=(0,_asyncToGenerator2.default)(function*(){var _this=this;try{var authorizationResult=yield(0,_mobileWalletAdapterProtocolWeb3js.transact)(function(){var _ref=(0,_asyncToGenerator2.default)(function*(wallet){var authorizationResult=yield wallet.authorize({cluster:_this.config.cluster,identity:_solanaConfig.APP_IDENTITY});return authorizationResult;});return function(_x){return _ref.apply(this,arguments);};}());if(authorizationResult.accounts.length>0){this.connectedPublicKey=authorizationResult.accounts[0].publicKey;this.config.onConnect?.(this.connectedPublicKey);return this.connectedPublicKey;}throw new Error('No accounts found');}catch(error){console.error('Mobile wallet connection failed:',error);this.config.onError?.(error);return null;}});function connect(){return _connect.apply(this,arguments);}return connect;}())},{key:\"disconnect\",value:(function(){var _disconnect=(0,_asyncToGenerator2.default)(function*(){try{yield(0,_mobileWalletAdapterProtocolWeb3js.transact)(function(){var _ref2=(0,_asyncToGenerator2.default)(function*(wallet){yield wallet.deauthorize({auth_token:''});});return function(_x2){return _ref2.apply(this,arguments);};}());this.connectedPublicKey=null;this.config.onDisconnect?.();}catch(error){console.error('Mobile wallet disconnection failed:',error);this.config.onError?.(error);}});function disconnect(){return _disconnect.apply(this,arguments);}return disconnect;}())},{key:\"signTransaction\",value:(function(){var _signTransaction=(0,_asyncToGenerator2.default)(function*(transaction){var _this2=this;if(!this.connectedPublicKey){throw new Error('Wallet not connected');}try{var signedTransaction=yield(0,_mobileWalletAdapterProtocolWeb3js.transact)(function(){var _ref3=(0,_asyncToGenerator2.default)(function*(wallet){var _yield$_this2$connect=yield _this2.connection.getLatestBlockhash(),blockhash=_yield$_this2$connect.blockhash;transaction.recentBlockhash=blockhash;transaction.feePayer=_this2.connectedPublicKey;var signedTransactions=yield wallet.signTransactions({transactions:[transaction]});return signedTransactions[0];});return function(_x4){return _ref3.apply(this,arguments);};}());return signedTransaction;}catch(error){console.error('Transaction signing failed:',error);this.config.onError?.(error);return null;}});function signTransaction(_x3){return _signTransaction.apply(this,arguments);}return signTransaction;}())},{key:\"signAndSendTransaction\",value:(function(){var _signAndSendTransaction=(0,_asyncToGenerator2.default)(function*(transaction){var _this3=this;if(!this.connectedPublicKey){throw new Error('Wallet not connected');}try{var signature=yield(0,_mobileWalletAdapterProtocolWeb3js.transact)(function(){var _ref4=(0,_asyncToGenerator2.default)(function*(wallet){var _yield$_this3$connect=yield _this3.connection.getLatestBlockhash(),blockhash=_yield$_this3$connect.blockhash;transaction.recentBlockhash=blockhash;transaction.feePayer=_this3.connectedPublicKey;var signedTransactions=yield wallet.signAndSendTransactions({transactions:[transaction]});return signedTransactions[0];});return function(_x6){return _ref4.apply(this,arguments);};}());yield this.connection.confirmTransaction(signature);return signature;}catch(error){console.error('Transaction failed:',error);this.config.onError?.(error);return null;}});function signAndSendTransaction(_x5){return _signAndSendTransaction.apply(this,arguments);}return signAndSendTransaction;}())},{key:\"requestAirdrop\",value:(function(){var _requestAirdrop=(0,_asyncToGenerator2.default)(function*(amount=2){if(!this.connectedPublicKey){throw new Error('Wallet not connected');}try{var signature=yield this.connection.requestAirdrop(this.connectedPublicKey,amount*_web.LAMPORTS_PER_SOL);yield this.connection.confirmTransaction(signature);return signature;}catch(error){console.error('Airdrop failed:',error);this.config.onError?.(error);return null;}});function requestAirdrop(){return _requestAirdrop.apply(this,arguments);}return requestAirdrop;}())},{key:\"getBalance\",value:(function(){var _getBalance=(0,_asyncToGenerator2.default)(function*(){if(!this.connectedPublicKey){return 0;}try{var balance=yield this.connection.getBalance(this.connectedPublicKey);return balance/_web.LAMPORTS_PER_SOL;}catch(error){console.error('Balance fetch failed:',error);return 0;}});function getBalance(){return _getBalance.apply(this,arguments);}return getBalance;}())},{key:\"getPublicKey\",value:function getPublicKey(){return this.connectedPublicKey;}},{key:\"isConnected\",value:function isConnected(){return this.connectedPublicKey!==null;}}]);}();var mobileWalletService=exports.mobileWalletService=new MobileWalletService({cluster:'devnet',onConnect:function(publicKey){console.log('Wallet connected:',publicKey.toBase58());},onDisconnect:function(){console.log('Wallet disconnected');},onError:function(error){console.error('Mobile wallet error:',error);}});","map":{"version":3,"names":["_mobileWalletAdapterProtocolWeb3js","require","_web","_solanaConfig","MobileWalletService","exports","config","_classCallCheck2","default","connectedPublicKey","connection","_createClass2","key","value","_connect","_asyncToGenerator2","_this","authorizationResult","transact","_ref","wallet","authorize","cluster","identity","APP_IDENTITY","_x","apply","arguments","accounts","length","publicKey","onConnect","Error","error","console","onError","connect","_disconnect","_ref2","deauthorize","auth_token","_x2","onDisconnect","disconnect","_signTransaction","transaction","_this2","signedTransaction","_ref3","_yield$_this2$connect","getLatestBlockhash","blockhash","recentBlockhash","feePayer","signedTransactions","signTransactions","transactions","_x4","signTransaction","_x3","_signAndSendTransaction","_this3","signature","_ref4","_yield$_this3$connect","signAndSendTransactions","_x6","confirmTransaction","signAndSendTransaction","_x5","_requestAirdrop","amount","requestAirdrop","LAMPORTS_PER_SOL","_getBalance","balance","getBalance","getPublicKey","isConnected","mobileWalletService","log","toBase58"],"sources":["/Users/sarahfitzgerald/SolStocksMobile/src/utils/mobileWalletAdapter.ts"],"sourcesContent":["import {\n  transact,\n  Web3MobileWallet,\n} from '@solana-mobile/mobile-wallet-adapter-protocol-web3js';\nimport { \n  Connection, \n  PublicKey, \n  Transaction,\n  SystemProgram,\n  LAMPORTS_PER_SOL\n} from '@solana/web3.js';\nimport { APP_IDENTITY, connection } from './solanaConfig';\n\nexport interface MobileWalletAdapterConfig {\n  cluster: 'devnet' | 'testnet' | 'mainnet-beta';\n  onConnect?: (publicKey: PublicKey) => void;\n  onDisconnect?: () => void;\n  onError?: (error: Error) => void;\n}\n\nexport class MobileWalletService {\n  private connection: Connection;\n  private connectedPublicKey: PublicKey | null = null;\n  private config: MobileWalletAdapterConfig;\n\n  constructor(config: MobileWalletAdapterConfig) {\n    this.connection = connection;\n    this.config = config;\n  }\n\n  /**\n   * Connect to mobile wallet using Mobile Wallet Adapter\n   */\n  async connect(): Promise<PublicKey | null> {\n    try {\n      const authorizationResult = await transact(async (wallet: Web3MobileWallet) => {\n        // Request authorization from the wallet\n        const authorizationResult = await wallet.authorize({\n          cluster: this.config.cluster,\n          identity: APP_IDENTITY,\n        });\n\n        return authorizationResult;\n      });\n\n      if (authorizationResult.accounts.length > 0) {\n        this.connectedPublicKey = authorizationResult.accounts[0].publicKey;\n        this.config.onConnect?.(this.connectedPublicKey);\n        return this.connectedPublicKey;\n      }\n\n      throw new Error('No accounts found');\n    } catch (error) {\n      console.error('Mobile wallet connection failed:', error);\n      this.config.onError?.(error as Error);\n      return null;\n    }\n  }\n\n  /**\n   * Disconnect from mobile wallet\n   */\n  async disconnect(): Promise<void> {\n    try {\n      await transact(async (wallet: Web3MobileWallet) => {\n        await wallet.deauthorize({\n          auth_token: '', // This would be stored from authorization\n        });\n      });\n\n      this.connectedPublicKey = null;\n      this.config.onDisconnect?.();\n    } catch (error) {\n      console.error('Mobile wallet disconnection failed:', error);\n      this.config.onError?.(error as Error);\n    }\n  }\n\n  /**\n   * Sign transaction using mobile wallet\n   */\n  async signTransaction(transaction: Transaction): Promise<Transaction | null> {\n    if (!this.connectedPublicKey) {\n      throw new Error('Wallet not connected');\n    }\n\n    try {\n      const signedTransaction = await transact(async (wallet: Web3MobileWallet) => {\n        // Get latest blockhash\n        const { blockhash } = await this.connection.getLatestBlockhash();\n        transaction.recentBlockhash = blockhash;\n        transaction.feePayer = this.connectedPublicKey!;\n\n        // Sign the transaction\n        const signedTransactions = await wallet.signTransactions({\n          transactions: [transaction],\n        });\n\n        return signedTransactions[0];\n      });\n\n      return signedTransaction;\n    } catch (error) {\n      console.error('Transaction signing failed:', error);\n      this.config.onError?.(error as Error);\n      return null;\n    }\n  }\n\n  /**\n   * Sign and send transaction\n   */\n  async signAndSendTransaction(transaction: Transaction): Promise<string | null> {\n    if (!this.connectedPublicKey) {\n      throw new Error('Wallet not connected');\n    }\n\n    try {\n      const signature = await transact(async (wallet: Web3MobileWallet) => {\n        // Get latest blockhash\n        const { blockhash } = await this.connection.getLatestBlockhash();\n        transaction.recentBlockhash = blockhash;\n        transaction.feePayer = this.connectedPublicKey!;\n\n        // Sign and send the transaction\n        const signedTransactions = await wallet.signAndSendTransactions({\n          transactions: [transaction],\n        });\n\n        return signedTransactions[0];\n      });\n\n      // Wait for confirmation\n      await this.connection.confirmTransaction(signature);\n      return signature;\n    } catch (error) {\n      console.error('Transaction failed:', error);\n      this.config.onError?.(error as Error);\n      return null;\n    }\n  }\n\n  /**\n   * Request airdrop for devnet testing\n   */\n  async requestAirdrop(amount: number = 2): Promise<string | null> {\n    if (!this.connectedPublicKey) {\n      throw new Error('Wallet not connected');\n    }\n\n    try {\n      const signature = await this.connection.requestAirdrop(\n        this.connectedPublicKey,\n        amount * LAMPORTS_PER_SOL\n      );\n\n      await this.connection.confirmTransaction(signature);\n      return signature;\n    } catch (error) {\n      console.error('Airdrop failed:', error);\n      this.config.onError?.(error as Error);\n      return null;\n    }\n  }\n\n  /**\n   * Get SOL balance\n   */\n  async getBalance(): Promise<number> {\n    if (!this.connectedPublicKey) {\n      return 0;\n    }\n\n    try {\n      const balance = await this.connection.getBalance(this.connectedPublicKey);\n      return balance / LAMPORTS_PER_SOL;\n    } catch (error) {\n      console.error('Balance fetch failed:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Get connected public key\n   */\n  getPublicKey(): PublicKey | null {\n    return this.connectedPublicKey;\n  }\n\n  /**\n   * Check if wallet is connected\n   */\n  isConnected(): boolean {\n    return this.connectedPublicKey !== null;\n  }\n}\n\n// Export singleton instance\nexport const mobileWalletService = new MobileWalletService({\n  cluster: 'devnet',\n  onConnect: (publicKey) => {\n    console.log('Wallet connected:', publicKey.toBase58());\n  },\n  onDisconnect: () => {\n    console.log('Wallet disconnected');\n  },\n  onError: (error) => {\n    console.error('Mobile wallet error:', error);\n  },\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}