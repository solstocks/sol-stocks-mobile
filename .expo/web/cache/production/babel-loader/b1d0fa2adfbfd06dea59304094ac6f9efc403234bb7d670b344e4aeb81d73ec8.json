{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _Dimensions=_interopRequireDefault(require(\"../Dimensions\"));var PixelRatio=exports.default=function(){function PixelRatio(){(0,_classCallCheck2.default)(this,PixelRatio);}return(0,_createClass2.default)(PixelRatio,null,[{key:\"get\",value:function get(){return _Dimensions.default.get('window').scale;}},{key:\"getFontScale\",value:function getFontScale(){return _Dimensions.default.get('window').fontScale||PixelRatio.get();}},{key:\"getPixelSizeForLayoutSize\",value:function getPixelSizeForLayoutSize(layoutSize){return Math.round(layoutSize*PixelRatio.get());}},{key:\"roundToNearestPixel\",value:function roundToNearestPixel(layoutSize){var ratio=PixelRatio.get();return Math.round(layoutSize*ratio)/ratio;}}]);}();","map":{"version":3,"names":["_Dimensions","_interopRequireDefault","require","PixelRatio","exports","default","_classCallCheck2","_createClass2","key","value","get","Dimensions","scale","getFontScale","fontScale","getPixelSizeForLayoutSize","layoutSize","Math","round","roundToNearestPixel","ratio"],"sources":["/Users/sarahfitzgerald/SolStocksMobile/node_modules/react-native-web/dist/exports/PixelRatio/index.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport Dimensions from '../Dimensions';\n\n/**\n * PixelRatio gives access to the device pixel density.\n */\nexport default class PixelRatio {\n  /**\n   * Returns the device pixel density.\n   */\n  static get() {\n    return Dimensions.get('window').scale;\n  }\n\n  /**\n   * No equivalent for Web\n   */\n  static getFontScale() {\n    return Dimensions.get('window').fontScale || PixelRatio.get();\n  }\n\n  /**\n   * Converts a layout size (dp) to pixel size (px).\n   * Guaranteed to return an integer number.\n   */\n  static getPixelSizeForLayoutSize(layoutSize) {\n    return Math.round(layoutSize * PixelRatio.get());\n  }\n\n  /**\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\n   * an integer number of pixels. For example, on a device with a PixelRatio\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n   * exactly (8.33 * 3) = 25 pixels.\n   */\n  static roundToNearestPixel(layoutSize) {\n    var ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  }\n}"],"mappings":"yVAUA,IAAAA,WAAA,CAAAC,sBAAA,CAAAC,OAAA,mBAAuC,GAKlB,CAAAC,UAAU,CAAAC,OAAA,CAAAC,OAAA,qBAAAF,WAAA,KAAAG,gBAAA,CAAAD,OAAA,OAAAF,UAAA,YAAAI,aAAA,CAAAF,OAAA,EAAAF,UAAA,QAAAK,GAAA,OAAAC,KAAA,CAI7B,QAAO,CAAAC,GAAGA,CAAA,CAAG,CACX,MAAO,CAAAC,mBAAU,CAACD,GAAG,CAAC,QAAQ,CAAC,CAACE,KAAK,CACvC,CAAC,GAAAJ,GAAA,gBAAAC,KAAA,CAKD,QAAO,CAAAI,YAAYA,CAAA,CAAG,CACpB,MAAO,CAAAF,mBAAU,CAACD,GAAG,CAAC,QAAQ,CAAC,CAACI,SAAS,EAAIX,UAAU,CAACO,GAAG,CAAC,CAAC,CAC/D,CAAC,GAAAF,GAAA,6BAAAC,KAAA,CAMD,QAAO,CAAAM,yBAAyBA,CAACC,UAAU,CAAE,CAC3C,MAAO,CAAAC,IAAI,CAACC,KAAK,CAACF,UAAU,CAAGb,UAAU,CAACO,GAAG,CAAC,CAAC,CAAC,CAClD,CAAC,GAAAF,GAAA,uBAAAC,KAAA,CAQD,QAAO,CAAAU,mBAAmBA,CAACH,UAAU,CAAE,CACrC,GAAI,CAAAI,KAAK,CAAGjB,UAAU,CAACO,GAAG,CAAC,CAAC,CAC5B,MAAO,CAAAO,IAAI,CAACC,KAAK,CAACF,UAAU,CAAGI,KAAK,CAAC,CAAGA,KAAK,CAC/C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}