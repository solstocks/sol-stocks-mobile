{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.STORAGE_TYPE=exports.SECURITY_LEVEL=exports.BIOMETRY_TYPE=exports.AUTHENTICATION_TYPE=exports.ACCESS_CONTROL=exports.ACCESSIBLE=void 0;var _reactNative=require(\"react-native\");var RNKeychainManager=_reactNative.NativeModules.RNKeychainManager;var ACCESSIBLE=exports.ACCESSIBLE=function(ACCESSIBLE){ACCESSIBLE[\"WHEN_UNLOCKED\"]=\"AccessibleWhenUnlocked\";ACCESSIBLE[\"AFTER_FIRST_UNLOCK\"]=\"AccessibleAfterFirstUnlock\";ACCESSIBLE[\"ALWAYS\"]=\"AccessibleAlways\";ACCESSIBLE[\"WHEN_PASSCODE_SET_THIS_DEVICE_ONLY\"]=\"AccessibleWhenPasscodeSetThisDeviceOnly\";ACCESSIBLE[\"WHEN_UNLOCKED_THIS_DEVICE_ONLY\"]=\"AccessibleWhenUnlockedThisDeviceOnly\";ACCESSIBLE[\"AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY\"]=\"AccessibleAfterFirstUnlockThisDeviceOnly\";return ACCESSIBLE;}({});var ACCESS_CONTROL=exports.ACCESS_CONTROL=function(ACCESS_CONTROL){ACCESS_CONTROL[\"USER_PRESENCE\"]=\"UserPresence\";ACCESS_CONTROL[\"BIOMETRY_ANY\"]=\"BiometryAny\";ACCESS_CONTROL[\"BIOMETRY_CURRENT_SET\"]=\"BiometryCurrentSet\";ACCESS_CONTROL[\"DEVICE_PASSCODE\"]=\"DevicePasscode\";ACCESS_CONTROL[\"APPLICATION_PASSWORD\"]=\"ApplicationPassword\";ACCESS_CONTROL[\"BIOMETRY_ANY_OR_DEVICE_PASSCODE\"]=\"BiometryAnyOrDevicePasscode\";ACCESS_CONTROL[\"BIOMETRY_CURRENT_SET_OR_DEVICE_PASSCODE\"]=\"BiometryCurrentSetOrDevicePasscode\";return ACCESS_CONTROL;}({});var AUTHENTICATION_TYPE=exports.AUTHENTICATION_TYPE=function(AUTHENTICATION_TYPE){AUTHENTICATION_TYPE[\"DEVICE_PASSCODE_OR_BIOMETRICS\"]=\"AuthenticationWithBiometricsDevicePasscode\";AUTHENTICATION_TYPE[\"BIOMETRICS\"]=\"AuthenticationWithBiometrics\";return AUTHENTICATION_TYPE;}({});var SECURITY_LEVEL=exports.SECURITY_LEVEL=function(SECURITY_LEVEL){SECURITY_LEVEL[SECURITY_LEVEL[\"SECURE_SOFTWARE\"]=RNKeychainManager&&RNKeychainManager.SECURITY_LEVEL_SECURE_SOFTWARE]=\"SECURE_SOFTWARE\";SECURITY_LEVEL[SECURITY_LEVEL[\"SECURE_HARDWARE\"]=RNKeychainManager&&RNKeychainManager.SECURITY_LEVEL_SECURE_HARDWARE]=\"SECURE_HARDWARE\";SECURITY_LEVEL[SECURITY_LEVEL[\"ANY\"]=RNKeychainManager&&RNKeychainManager.SECURITY_LEVEL_ANY]=\"ANY\";return SECURITY_LEVEL;}({});var BIOMETRY_TYPE=exports.BIOMETRY_TYPE=function(BIOMETRY_TYPE){BIOMETRY_TYPE[\"TOUCH_ID\"]=\"TouchID\";BIOMETRY_TYPE[\"FACE_ID\"]=\"FaceID\";BIOMETRY_TYPE[\"OPTIC_ID\"]=\"OpticID\";BIOMETRY_TYPE[\"FINGERPRINT\"]=\"Fingerprint\";BIOMETRY_TYPE[\"FACE\"]=\"Face\";BIOMETRY_TYPE[\"IRIS\"]=\"Iris\";return BIOMETRY_TYPE;}({});var STORAGE_TYPE=exports.STORAGE_TYPE=function(STORAGE_TYPE){STORAGE_TYPE[\"AES_CBC\"]=\"KeystoreAESCBC\";STORAGE_TYPE[\"AES_GCM_NO_AUTH\"]=\"KeystoreAESGCM_NoAuth\";STORAGE_TYPE[\"AES_GCM\"]=\"KeystoreAESGCM\";STORAGE_TYPE[\"RSA\"]=\"KeystoreRSAECB\";return STORAGE_TYPE;}({});","map":{"version":3,"names":["_reactNative","require","RNKeychainManager","NativeModules","ACCESSIBLE","exports","ACCESS_CONTROL","AUTHENTICATION_TYPE","SECURITY_LEVEL","SECURITY_LEVEL_SECURE_SOFTWARE","SECURITY_LEVEL_SECURE_HARDWARE","SECURITY_LEVEL_ANY","BIOMETRY_TYPE","STORAGE_TYPE"],"sources":["/Users/sarahfitzgerald/SolStocksMobile/node_modules/react-native-keychain/src/enums.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\n\nconst { RNKeychainManager } = NativeModules;\n\n/**\n * Enum representing when a keychain item is accessible.\n */\nexport enum ACCESSIBLE {\n  /** The data in the keychain item can be accessed only while the device is unlocked by the user. */\n  WHEN_UNLOCKED = 'AccessibleWhenUnlocked',\n  /** The data in the keychain item cannot be accessed after a restart until the device has been unlocked once by the user. */\n  AFTER_FIRST_UNLOCK = 'AccessibleAfterFirstUnlock',\n  /** The data in the keychain item can always be accessed regardless of whether the device is locked. */\n  ALWAYS = 'AccessibleAlways',\n  /** The data in the keychain can only be accessed when the device is unlocked. Only available if a passcode is set on the device. Items with this attribute never migrate to a new device. */\n  WHEN_PASSCODE_SET_THIS_DEVICE_ONLY = 'AccessibleWhenPasscodeSetThisDeviceOnly',\n  /** The data in the keychain item can be accessed only while the device is unlocked by the user. Items with this attribute do not migrate to a new device. */\n  WHEN_UNLOCKED_THIS_DEVICE_ONLY = 'AccessibleWhenUnlockedThisDeviceOnly',\n  /** The data in the keychain item cannot be accessed after a restart until the device has been unlocked once by the user. Items with this attribute never migrate to a new device. */\n  AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY = 'AccessibleAfterFirstUnlockThisDeviceOnly',\n}\n\n/**\n * Enum representing access control options.\n */\nexport enum ACCESS_CONTROL {\n  /** Constraint to access an item with either Touch ID or passcode. */\n  USER_PRESENCE = 'UserPresence',\n  /** Constraint to access an item with Touch ID for any enrolled fingers. */\n  BIOMETRY_ANY = 'BiometryAny',\n  /** Constraint to access an item with Touch ID for currently enrolled fingers. */\n  BIOMETRY_CURRENT_SET = 'BiometryCurrentSet',\n  /** Constraint to access an item with the device passcode. */\n  DEVICE_PASSCODE = 'DevicePasscode',\n  /** Constraint to use an application-provided password for data encryption key generation. */\n  APPLICATION_PASSWORD = 'ApplicationPassword',\n  /** Constraint to access an item with Touch ID for any enrolled fingers or passcode. */\n  BIOMETRY_ANY_OR_DEVICE_PASSCODE = 'BiometryAnyOrDevicePasscode',\n  /** Constraint to access an item with Touch ID for currently enrolled fingers or passcode. */\n  BIOMETRY_CURRENT_SET_OR_DEVICE_PASSCODE = 'BiometryCurrentSetOrDevicePasscode',\n}\n\n/**\n * Enum representing authentication types.\n */\nexport enum AUTHENTICATION_TYPE {\n  /** Device owner is going to be authenticated by biometry or device passcode. */\n  DEVICE_PASSCODE_OR_BIOMETRICS = 'AuthenticationWithBiometricsDevicePasscode',\n  /** Device owner is going to be authenticated using a biometric method (Touch ID or Face ID). */\n  BIOMETRICS = 'AuthenticationWithBiometrics',\n}\n\n/**\n * Enum representing security levels.\n * @platform Android\n */\nexport enum SECURITY_LEVEL {\n  /** Requires for the key to be stored in the Android Keystore, separate from the encrypted data. */\n  SECURE_SOFTWARE = RNKeychainManager &&\n    RNKeychainManager.SECURITY_LEVEL_SECURE_SOFTWARE,\n  /** Requires for the key to be stored on a secure hardware (Trusted Execution Environment or Secure Environment).\n   * Read this article for more information: https://developer.android.com/privacy-and-security/keystore#ExtractionPrevention\n   * */\n  SECURE_HARDWARE = RNKeychainManager &&\n    RNKeychainManager.SECURITY_LEVEL_SECURE_HARDWARE,\n  /** No security guarantees needed (default value). Credentials can be stored in FB Secure Storage. */\n  ANY = RNKeychainManager && RNKeychainManager.SECURITY_LEVEL_ANY,\n}\n\n/**\n * Enum representing types of biometric authentication supported by the device.\n */\nexport enum BIOMETRY_TYPE {\n  /** Device supports authentication with Touch ID.\n   * @platform iOS\n   */\n  TOUCH_ID = 'TouchID',\n  /** Device supports authentication with Face ID.\n   * @platform iOS\n   */\n  FACE_ID = 'FaceID',\n  /** Device supports authentication with Optic ID.\n   *  @platform visionOS\n   */\n  OPTIC_ID = 'OpticID',\n  /** Device supports authentication with Fingerprint.\n   * @platform Android\n   */\n  FINGERPRINT = 'Fingerprint',\n  /** Device supports authentication with Face Recognition.\n   * @platform Android\n   */\n  FACE = 'Face',\n  /** Device supports authentication with Iris Recognition.\n   * @platform Android\n   */\n  IRIS = 'Iris',\n}\n\n/**\n * Enum representing cryptographic storage types for sensitive data.\n *\n * Security Level Categories:\n *\n * 1. High Security (Biometric Authentication Required):\n * - AES_GCM: For sensitive local data (passwords, personal info)\n * - RSA: For asymmetric operations (signatures, key exchange)\n *\n * 2. Medium Security (No Authentication):\n * - AES_GCM_NO_AUTH: For app-level secrets and cached data\n *\n * 3. Legacy/Deprecated:\n * - AES_CBC: Outdated, use AES_GCM_NO_AUTH instead\n *\n * @platform Android\n */\nexport enum STORAGE_TYPE {\n  /**\n   * AES encryption in CBC (Cipher Block Chaining) mode.\n   * Provides data confidentiality without authentication.\n   * @deprecated Use AES_GCM_NO_AUTH instead.\n   */\n  AES_CBC = 'KeystoreAESCBC',\n  /**\n   * AES encryption in GCM (Galois/Counter Mode).\n   * Provides both data confidentiality and authentication.\n   */\n  AES_GCM_NO_AUTH = 'KeystoreAESGCM_NoAuth',\n  /**\n   * AES-GCM encryption with biometric authentication.\n   * Requires user authentication for both encryption and decryption operations.\n   */\n  AES_GCM = 'KeystoreAESGCM',\n  /**\n   * RSA encryption with biometric authentication.\n   * Uses asymmetric encryption and requires biometric authentication.\n   */\n  RSA = 'KeystoreRSAECB',\n}\n"],"mappings":"qNAAA,IAAAA,YAAA,CAAAC,OAAA,iBAEA,GAAQ,CAAAC,iBAAA,CAAsBC,0BAAa,CAAnCD,iBAAA,CAKR,GAAY,CAAAE,UAAU,CAAAC,OAAA,CAAAD,UAAA,UAAVA,UAAU,EAAVA,UAAU,2CAAVA,UAAU,oDAAVA,UAAU,8BAAVA,UAAU,iFAAVA,UAAU,0EAAVA,UAAU,yFAAV,CAAAA,UAAU,OAkBtB,GAAY,CAAAE,cAAc,CAAAD,OAAA,CAAAC,cAAA,UAAdA,cAAc,EAAdA,cAAc,iCAAdA,cAAc,+BAAdA,cAAc,8CAAdA,cAAc,qCAAdA,cAAc,+CAAdA,cAAc,kEAAdA,cAAc,uFAAd,CAAAA,cAAc,OAoB1B,GAAY,CAAAC,mBAAmB,CAAAF,OAAA,CAAAE,mBAAA,UAAnBA,mBAAmB,EAAnBA,mBAAmB,+EAAnBA,mBAAmB,oDAAnB,CAAAA,mBAAmB,OAW/B,GAAY,CAAAC,cAAc,CAAAH,OAAA,CAAAG,cAAA,UAAdA,cAAc,EAAdA,cAAc,CAAdA,cAAc,oBAENN,iBAAiB,EACjCA,iBAAiB,CAACO,8BAA8B,oBAHxCD,cAAc,CAAdA,cAAc,oBAONN,iBAAiB,EACjCA,iBAAiB,CAACQ,8BAA8B,oBARxCF,cAAc,CAAdA,cAAc,QAUlBN,iBAAiB,EAAIA,iBAAiB,CAACS,kBAAkB,cAVrD,CAAAH,cAAc,OAgB1B,GAAY,CAAAI,aAAa,CAAAP,OAAA,CAAAO,aAAA,UAAbA,aAAa,EAAbA,aAAa,uBAAbA,aAAa,qBAAbA,aAAa,uBAAbA,aAAa,8BAAbA,aAAa,gBAAbA,aAAa,sBAAb,CAAAA,aAAa,OA4CzB,GAAY,CAAAC,YAAY,CAAAR,OAAA,CAAAQ,YAAA,UAAZA,YAAY,EAAZA,YAAY,6BAAZA,YAAY,4CAAZA,YAAY,6BAAZA,YAAY,+BAAZ,CAAAA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}