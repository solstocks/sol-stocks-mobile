{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});","map":{"version":3,"names":[],"sources":["/Users/sarahfitzgerald/SolStocksMobile/node_modules/react-native-keychain/src/types.ts"],"sourcesContent":["import type {\n  ACCESS_CONTROL,\n  ACCESSIBLE,\n  AUTHENTICATION_TYPE,\n  SECURITY_LEVEL,\n  STORAGE_TYPE,\n} from './enums';\n\n/**\n * Options for authentication prompt displayed to the user.\n */\nexport type AuthenticationPrompt = {\n  /** The title for the authentication prompt. */\n  title?: string;\n  /** The subtitle for the authentication prompt.\n   * @platform Android\n   */\n  subtitle?: string;\n  /** The description for the authentication prompt.\n   * @platform Android\n   */\n  description?: string;\n  /** The cancel button text for the authentication prompt.\n   * @platform Android\n   */\n  cancel?: string;\n};\n\nexport type BaseOptions = {\n  /** The service name to associate with the keychain item.\n   * @default 'App bundle ID'\n   */\n  service?: string;\n  /** The server name to associate with the keychain item. */\n  server?: string;\n  /** Whether to synchronize the keychain item to iCloud.\n   * @platform iOS\n   */\n  cloudSync?: boolean;\n  /** The access group to share keychain items between apps.\n   * @platform iOS, visionOS\n   */\n  accessGroup?: string;\n};\n\nexport type SetOptions = {\n  /** Specifies when a keychain item is accessible.\n   * @platform iOS, visionOS\n   * @default ACCESSIBLE.AFTER_FIRST_UNLOCK\n   */\n  accessible?: ACCESSIBLE;\n  /** The desired security level of the keychain item.\n   * @platform Android\n   */\n  securityLevel?: SECURITY_LEVEL;\n  /** The storage type.\n   * @platform Android\n   * @default 'Best available storage'\n   */\n  storage?: STORAGE_TYPE;\n  /** Authentication prompt details or a title string.\n   * @default\n   * ```json\n   * {\n   *   \"title\": \"Authenticate to retrieve secret\",\n   *   \"cancel\": \"Cancel\"\n   * }\n   * ```\n   *\n   */\n  authenticationPrompt?: AuthenticationPrompt;\n} & BaseOptions &\n  AccessControlOption;\n\nexport type GetOptions = {\n  /** The access control policy to use for the keychain item. */\n  accessControl?: ACCESS_CONTROL;\n  /** Authentication prompt details or a title string.\n   * @default\n   * ```json\n   * {\n   *   \"title\": \"Authenticate to retrieve secret\",\n   *   \"cancel\": \"Cancel\"\n   * }\n   * ```\n   *\n   */\n  authenticationPrompt?: AuthenticationPrompt;\n} & BaseOptions &\n  AccessControlOption;\n\nexport type GetAllOptions = {\n  /** Whether items requiring user authentication should be skipped\n   * @platform iOS\n   */\n  skipUIAuth?: boolean;\n};\n\nexport type AccessControlOption = {\n  /** The access control policy to use for the keychain item. */\n  accessControl?: ACCESS_CONTROL;\n};\n\nexport type AuthenticationTypeOption = {\n  /** Authentication type for retrieving keychain item.\n   * @platform iOS, visionOS\n   * @default AUTHENTICATION_TYPE.DEVICE_PASSCODE_OR_BIOMETRICS\n   */\n  authenticationType?: AUTHENTICATION_TYPE;\n};\n\n/**\n * Result returned by keychain functions.\n */\nexport type Result = {\n  /** The service name associated with the keychain item. */\n  service: string;\n  /** The storage type used for the keychain item. */\n  storage: STORAGE_TYPE;\n};\n\n/**\n * User credentials returned by keychain functions.\n */\nexport type UserCredentials = {\n  /** The username associated with the keychain item. */\n  username: string;\n  /** The password associated with the keychain item. */\n  password: string;\n} & Result;\n\n/**\n * Shared web credentials returned by keychain functions.\n * @platform iOS\n */\nexport type SharedWebCredentials = {\n  /** The server associated with the keychain item. */\n  server: string;\n} & UserCredentials;\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}