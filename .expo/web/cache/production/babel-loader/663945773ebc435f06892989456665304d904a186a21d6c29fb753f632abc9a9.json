{"ast":null,"code":"'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=usePressEvents;var _PressResponder=_interopRequireDefault(require(\"./PressResponder\"));var _react=require(\"react\");function usePressEvents(hostRef,config){var pressResponderRef=(0,_react.useRef)(null);if(pressResponderRef.current==null){pressResponderRef.current=new _PressResponder.default(config);}var pressResponder=pressResponderRef.current;(0,_react.useEffect)(function(){pressResponder.configure(config);},[config,pressResponder]);(0,_react.useEffect)(function(){return function(){pressResponder.reset();};},[pressResponder]);(0,_react.useDebugValue)(config);return pressResponder.getEventHandlers();}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","usePressEvents","_PressResponder","_react","hostRef","config","pressResponderRef","useRef","current","PressResponder","pressResponder","useEffect","configure","reset","useDebugValue","getEventHandlers"],"sources":["/Users/sarahfitzgerald/SolStocksMobile/node_modules/react-native-web/dist/modules/usePressEvents/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n'use strict';\n\nimport PressResponder from './PressResponder';\nimport { useDebugValue, useEffect, useRef } from 'react';\nexport default function usePressEvents(hostRef, config) {\n  var pressResponderRef = useRef(null);\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new PressResponder(config);\n  }\n  var pressResponder = pressResponderRef.current;\n\n  // Re-configure to use the current node and configuration.\n  useEffect(() => {\n    pressResponder.configure(config);\n  }, [config, pressResponder]);\n\n  // Reset the `pressResponder` when cleanup needs to occur. This is\n  // a separate effect because we do not want to rest the responder when `config` changes.\n  useEffect(() => {\n    return () => {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  useDebugValue(config);\n  return pressResponder.getEventHandlers();\n}"],"mappings":"AAUA,YAAY,CAAC,IAAAA,sBAAA,CAAAC,OAAA,iDAAAC,MAAA,CAAAC,cAAA,CAAAC,OAAA,eAAAC,KAAA,QAAAD,OAAA,CAAAE,OAAA,CAAAC,cAAA,CAEb,IAAAC,eAAA,CAAAR,sBAAA,CAAAC,OAAA,sBACA,IAAAQ,MAAA,CAAAR,OAAA,UACe,QAAS,CAAAM,cAAcA,CAACG,OAAO,CAAEC,MAAM,CAAE,CACtD,GAAI,CAAAC,iBAAiB,CAAG,GAAAC,aAAM,EAAC,IAAI,CAAC,CACpC,GAAID,iBAAiB,CAACE,OAAO,EAAI,IAAI,CAAE,CACrCF,iBAAiB,CAACE,OAAO,CAAG,GAAI,CAAAC,uBAAc,CAACJ,MAAM,CAAC,CACxD,CACA,GAAI,CAAAK,cAAc,CAAGJ,iBAAiB,CAACE,OAAO,CAG9C,GAAAG,gBAAS,EAAC,UAAM,CACdD,cAAc,CAACE,SAAS,CAACP,MAAM,CAAC,CAClC,CAAC,CAAE,CAACA,MAAM,CAAEK,cAAc,CAAC,CAAC,CAI5B,GAAAC,gBAAS,EAAC,UAAM,CACd,MAAO,WAAM,CACXD,cAAc,CAACG,KAAK,CAAC,CAAC,CACxB,CAAC,CACH,CAAC,CAAE,CAACH,cAAc,CAAC,CAAC,CACpB,GAAAI,oBAAa,EAACT,MAAM,CAAC,CACrB,MAAO,CAAAK,cAAc,CAACK,gBAAgB,CAAC,CAAC,CAC1C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}